# JavaScript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build_and_unit_test:
    docker:
      # specify the version you desire here
      - image: circleci/node:13
    working_directory: ~/repo

    steps:
      - checkout

      - run: echo "lerna installing"
      # - run: sudo npm install -g lerna
      - run: sudo npm i
      - run: sudo npx lerna bootstrap
      - run: sudo npm run build:proto

      # build, lint, test!
      - run: npm run build
      - run: npm run lint
      - run: npm run test

  integration_test:
    docker:
      # specify the version you desire here
      - image: circleci/node:13
    working_directory: ~/repo

    steps:
      - checkout
      - setup-remote-docker

      # - run: echo "lerna installing"
      # - run: sudo npm install -g lerna
      # - run: sudo npm i
      # - run: sudo npx lerna bootstrap

      - run: npm run test:int:circleci

  # docker_deploy_backend:
  #   docker:
  #     - image: circleci/node:13
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - setup-remote-docker
  #     # Build and push Docker image - Only create and push newPA branch.
  #     - run: |
  #         if [ $CIRCLE_BRANCH != newPA ]; then exit 0; fi
  #         TAG=0.1.$CIRCLE_BUILD_NUM
  #         docker build -t $DOCKER_USER/proavalon_backend:$TAG -f Dockerfile.prod --build-arg SERVICE=backend .
  #         echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
  #         docker push $DOCKER_USER/proavalon_backend:$TAG
  # docker_deploy_frontend:
  #   docker:
  #     - image: circleci/node:13
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - setup-remote-docker
  #     # Build and push Docker image - Only create and push newPA branch.
  #     - run: |
  #         if [ $CIRCLE_BRANCH != newPA ]; then exit 0; fi
  #         TAG=0.1.$CIRCLE_BUILD_NUM
  #         docker build -t $DOCKER_USER/proavalon_frontend:$TAG -f Dockerfile.prod --build-arg SERVICE=frontend .
  #         echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
  #         docker push $DOCKER_USER/proavalon_frontend:$TAG

workflows:
  version: 2
  build_deploy:
    jobs:
      - build_and_unit_test
      - integration_test
      # - docker_deploy_backend:
      #     requires:
      #       - build
      # - docker_deploy_frontend:
      #     requires:
      #       - build
