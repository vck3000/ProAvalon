<% include partials/header%>

<div class="container">

    test

    <br>
    <br>


    <input type="text" class="room-chat-message-input chat-message-input">
    <input type="text" class="room-chat-message-input chat-message-input">
    <input type="text" class="room-chat-message-input chat-message-input">
    <input type="text" class="room-chat-message-input chat-message-input">

</div>

<script>

    

    // $(".chat-message-input").keypress(function (e) {
    //     console.log(e.which);   

    //     if (e.which === 9) {
    //         e.preventDefault();
    //         // do your code
    //     }

    // });

    $(".chat-message-input").val("asd");


    let lastKeyPress;
    $(".chat-message-input").on('keydown', function (e) {
        // console.log(e.which);   

        //if person presses the 'tab' button.
        if (e.which === 9) {
            e.preventDefault();
            // do your code

            // console.log('a');
            // console.log($(e.target).val());
            let newWord;
            let lastWord;
            if (lastKeyPress === 9) {
                console.log(goodPossibleStrings);
                //if our last keypress is still a tab, put the next possible autocome str in
                lastWord = currentAutoComeWord;

                if (goodPossibleStrings.indexOf(lastWord) + 1  > goodPossibleStrings.length - 1) {
                    newWord = goodPossibleStrings[0];
                }
                else {
                    console.log("last word: " + lastWord);
                    newWord = goodPossibleStrings[ goodPossibleStrings.indexOf(lastWord) + 1 ];
                }

                //set the new current auto come word
                currentAutoComeWord = newWord;
            }
            else {
                //if its out first time pressing tab
                lastWord = getLastWord($(e.target).val());
                newWord = autoCome($(e.target).val(), autoComeStrs.sort());
            }
            //if we get a new word
            if (newWord) {
                //get the new str after replacing
                //split the current stuff up:
                let splitted = $(e.target).val().split(" ");
                splitted[splitted.length-1] = newWord;

                let together = "";
                for  i = 0; i < splitted.length; i++) {
                    together = together + splitted[i];
                    if (i !== splitted.length - 1) {
                        together += " ";
                    }
                }

                let newStr = together;
                                
                //set the new text
                $(e.target).val(newStr);    
            }
        }
        lastKeyPress = e.which;
    });



    // let autoComeStrs = [
    //     "asdf",
    //     "ProNub",
    //     "asddddddd",
    //     "asdde",
    //     "asdfff",
    //     "afee",
    // ];

    let autoComeStrs = [
        "aa",
        "ab",
        "ac",
        "ad",
        "ae",
        "af",
        "ProNub",
        "OhBabyATripleOhYeahh",
        "test",
        "Prossss"
    ];

    function getLastWord(words) {
        let n = words.split(" ");
        return n[n.length - 1];
    }

    //state variables
    let goodPossibleStrings = [];
    let currentAutoComeWord = "";

    function autoCome(currentStr, possibleStrs) {
        let lastWord = getLastWord(currentStr);
        console.log(lastWord);

        goodPossibleStrings = [];

        //for every possible auto come str
        for  i = 0; i < possibleStrs.length; i++) {
            
            //for the length of the last word
            //check each character. if they match good, if they dont, break
            for  j = 0; j < lastWord.length; j++) {
                if (lastWord[j].toLowerCase() === possibleStrs[i][j].toLowerCase()) {
                    //good
                }
                else {
                    //bad
                    break;
                }

                if (j === lastWord.length-1) {
                    //passed all the checks, add to good possible strings
                    goodPossibleStrings.push(possibleStrs[i]);
                }
            }
        }

        console.log(goodPossibleStrings);
        currentAutoComeWord = goodPossibleStrings[0];
        return currentAutoComeWord;
    }

    




</script>


<% include partials/footer%>